"use client";

import { useEffect, useState, useRef } from "react";
import { useParams } from "next/navigation";
import { doc, getDoc, addDoc, collection, serverTimestamp } from "firebase/firestore";
import { db, auth } from "@/firebaseConfig";
import Link from "next/link";
import { Tag, Calendar, MapPin, BadgeCheck, Heart, Share2, User, Phone, Mail, X } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { onAuthStateChanged } from "firebase/auth";

// Mini-carousel
function ImageCarousel({ images = [], alt }) {
  const [index, setIndex] = useState(0);
  const imgRef = useRef(null);

  return (
    <div className="carousel-root">
      <div className="carousel-img-box" onClick={() => {
        // Zoom simples on click
        if (imgRef.current) imgRef.current.requestFullscreen?.();
      }}>
        <img
          ref={imgRef}
          src={images[index]}
          alt={alt}
          className="carousel-img"
          style={{ cursor: "zoom-in" }}
        />
      </div>
      {images.length > 1 && (
        <div className="carousel-thumbs">
          {images.map((img, i) => (
            <img
              src={img}
              key={i}
              alt={"thumb" + i}
              className={`carousel-thumb${i === index ? " selected" : ""}`}
              onClick={() => setIndex(i)}
            />
          ))}
        </div>
      )}
      <style jsx>{`
        .carousel-root { display: flex; flex-direction: column; align-items: center; gap: 18px;}
        .carousel-img-box { background: #fff; border-radius: 24px; box-shadow: 0 2px 22px #0002; }
        .carousel-img { width: 390px; height: 390px; border-radius: 24px; object-fit: cover;}
        .carousel-thumbs { display: flex; gap: 10px; margin-top: 6px;}
        .carousel-thumb { width: 62px; height: 62px; border-radius: 13px; object-fit: cover; border: 2.5px solid #fff; cursor: pointer; opacity: 0.72; box-shadow: 0 1px 6px #0001; transition: border .1s, opacity .15s;}
        .carousel-thumb.selected, .carousel-thumb:hover { border: 2.5px solid #FB8500; opacity: 1;}
        @media (max-width: 700px) {
          .carousel-img { width: 99vw; height: auto; max-width: 99vw; }
          .carousel-thumb { width: 44px; height: 44px;}
        }
      `}</style>
    </div>
  );
}

// Modal de contato refinado
function ModalContato({ open, onClose, onSubmit, usuario, produto }) {
  const [form, setForm] = useState({
    nome: usuario?.nome || "",
    telefone: usuario?.telefone || "",
    email: usuario?.email || "",
    cidade: usuario?.cidade || "",
    cpf: usuario?.cpf || "",
    mensagem: "",
  });
  const [enviando, setEnviando] = useState(false);

  useEffect(() => {
    if (open && usuario) {
      setForm((f) => ({
        ...f,
        nome: usuario.nome || "",
        telefone: usuario.telefone || "",
        email: usuario.email || "",
        cidade: usuario.cidade || "",
        cpf: usuario.cpf || "",
      }));
    }
  }, [open, usuario]);

  async function handleSubmit(e) {
    e.preventDefault();
    setEnviando(true);
    await onSubmit(form);
    setEnviando(false);
  }

  return (
    <AnimatePresence>
      {open && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="modal-bg"
          style={{
            position: "fixed", inset: 0, background: "#0219", zIndex: 2000,
            display: "flex", alignItems: "center", justifyContent: "center",
          }}
        >
          <motion.div
            initial={{ scale: 0.92, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.92, opacity: 0 }}
            transition={{ type: "spring", duration: 0.29 }}
            className="modal-card"
            style={{
              background: "#fff",
              borderRadius: 19,
              boxShadow: "0 8px 40px #0004",
              padding: 36,
              maxWidth: 420,
              width: "98vw",
              position: "relative",
            }}
          >
            <button
              onClick={onClose}
              style={{
                position: "absolute",
                top: 16,
                right: 20,
                fontSize: 22,
                background: "none",
                border: "none",
                color: "#219EBC",
                cursor: "pointer",
                fontWeight: 900
              }}
              aria-label="Fechar"
            >
              <X size={26} />
            </button>
            <h2 style={{ fontSize: "1.28rem", fontWeight: 800, color: "#023047", marginBottom: 18 }}>
              Fale com o anunciante
            </h2>
            <form onSubmit={handleSubmit} style={{ display: "flex", flexDirection: "column", gap: 13 }}>
              <input name="nome" placeholder="Nome completo" value={form.nome} onChange={e => setForm(f => ({ ...f, nome: e.target.value }))} required className="input-modal" />
              <input name="telefone" placeholder="Telefone / WhatsApp" value={form.telefone} onChange={e => setForm(f => ({ ...f, telefone: e.target.value }))} required className="input-modal" />
              <input name="email" type="email" placeholder="E-mail" value={form.email} onChange={e => setForm(f => ({ ...f, email: e.target.value }))} required className="input-modal" />
              <input name="cidade" placeholder="Cidade" value={form.cidade} onChange={e => setForm(f => ({ ...f, cidade: e.target.value }))} className="input-modal" />
              <input name="cpf" placeholder="CPF ou CNPJ" value={form.cpf} onChange={e => setForm(f => ({ ...f, cpf: e.target.value }))} className="input-modal" />
              <textarea name="mensagem" placeholder="Mensagem (opcional)" value={form.mensagem} onChange={e => setForm(f => ({ ...f, mensagem: e.target.value }))} className="input-modal" rows={3} />
              <button type="submit" className="btn-modal-laranja" disabled={enviando}>{enviando ? "Enviando..." : "Enviar mensagem"}</button>
              <small style={{ marginTop: 8, color: "#999" }}>
                Ao continuar, você concorda que a Pedraum Brasil não participa das negociações nem garante pagamentos, entregas ou resultados.
              </small>
            </form>
            <style jsx>{`
              .input-modal {
                border: 1.5px solid #d4e3ed;
                border-radius: 8px;
                padding: 11px 14px;
                font-size: 1rem;
                margin-bottom: 2px;
                outline: none;
                transition: border 0.15s;
              }
              .input-modal:focus {
                border: 1.5px solid #219EBC;
              }
              .btn-modal-laranja {
                margin-top: 11px;
                background: #FB8500;
                color: #fff;
                font-weight: 800;
                font-size: 1.09rem;
                border: none;
                border-radius: 8px;
                padding: 12px 0;
                cursor: pointer;
                transition: background .14s;
              }
              .btn-modal-laranja:disabled { background: #fbb75c; color: #fff; opacity: .7; cursor: default;}
              .btn-modal-laranja:hover:not(:disabled) { background: #e17000; }
            `}</style>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

export default function ProdutoDetalhePage() {
  const { id } = useParams();
  const [produto, setProduto] = useState<any>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [copiado, setCopiado] = useState(false);

  // Usuário logado real
  const [usuarioLogado, setUsuarioLogado] = useState<any>(null);
  const [carregandoUsuario, setCarregandoUsuario] = useState(true);
  // Dados do vendedor/dono do produto
  const [fornecedor, setFornecedor] = useState<any>(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        const docRef = doc(db, "usuarios", user.uid);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          setUsuarioLogado({
            id: user.uid,
            nome: docSnap.data().nome || user.displayName || "",
            telefone: docSnap.data().telefone || "",
            email: user.email || "",
            cidade: docSnap.data().cidade || "",
            cpf: docSnap.data().cpf || "",
          });
        } else {
          setUsuarioLogado({
            id: user.uid,
            nome: user.displayName || "",
            telefone: "",
            email: user.email || "",
            cidade: "",
            cpf: "",
          });
        }
      } else {
        setUsuarioLogado(null);
      }
      setCarregandoUsuario(false);
    });
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    async function fetchProduto() {
      if (!id) return;
      const docRef = doc(db, "produtos", String(id));
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        const data = { id: docSnap.id, ...docSnap.data() };
        setProduto(data);

        // Buscar vendedor pelo vendedorId
        if (data.vendedorId) {
          const fornecedorSnap = await getDoc(doc(db, "usuarios", data.vendedorId));
          if (fornecedorSnap.exists()) setFornecedor({ ...fornecedorSnap.data(), id: fornecedorSnap.id });
        }
      }
    }
    fetchProduto();
  }, [id]);

  if (!produto) return <div style={{ textAlign: "center", padding: 80 }}>Carregando...</div>;

  const imagens = produto.imagens?.length > 0 ? produto.imagens : ["/images/no-image.png"];
  const telefoneFornecedor = fornecedor?.telefone?.replace(/\D/g, "") || "31990903613";
  const shareUrl = typeof window !== "undefined" ? window.location.href : "";

  // Função copiar link
  function copyLink() {
    navigator.clipboard.writeText(window.location.href);
    setCopiado(true);
    setTimeout(() => setCopiado(false), 1800);
  }

  return (
    <section className="produto-detalhe">
      {/* Topo */}
      <div className="produto-header">
        <Link href="/vitrine" className="produto-voltar">&lt; Voltar para a Vitrine</Link>
      </div>

      <div className="produto-main-premium">
        {/* Imagem e galeria */}
        <div className="produto-galeria-box">
          <ImageCarousel images={imagens} alt={produto.nome} />
        </div>

        {/* Card com informações principais */}
        <div className="produto-card-premium">
          <div className="produto-preco">R$ {Number(produto.preco).toLocaleString("pt-BR")}</div>
          <button className="produto-btn-laranja" onClick={() => setModalOpen(true)} disabled={carregandoUsuario}>
            Entrar em Contato
          </button>
          {/* Card do anunciante */}
          <div className="produto-anunciante-box">
            <div className="produto-anunciante-icn">
              <User size={30} />
            </div>
            <div>
              <div className="produto-anunciante-nome">{fornecedor?.nome || "Vendedor"}</div>
              <div className="produto-anunciante-cidade"><MapPin size={16} style={{marginRight: 4}} />{fornecedor?.cidade || "Cidade"}</div>
            </div>
            <a href={`https://wa.me/55${telefoneFornecedor}?text=Olá! Tenho interesse no produto: ${encodeURIComponent(produto?.nome || "")}`} target="_blank" rel="noopener noreferrer" className="anunciante-whatsapp">
              <Phone size={19} /> WhatsApp
            </a>
          </div>
          {/* Infos principais */}
          <div className="produto-info-list">
            <span><Tag size={19} /> {produto.categoria}</span>
            <span><Calendar size={19} /> {produto.ano}</span>
            <span><BadgeCheck size={19} /> {produto.conservacao}</span>
            <span><MapPin size={19} /> {produto.cidade}, {produto.estado}</span>
          </div>
          {/* Botões sociais */}
          <div className="produto-btns">
            <button className="produto-btn-azul"><Heart size={20} /> Favoritar</button>
            <button className="produto-btn-azul" onClick={copyLink}><Share2 size={18} /> {copiado ? "Link copiado!" : "Compartilhar"}</button>
          </div>
        </div>
      </div>

      {/* Descrição completa */}
      <div className="produto-desc-box">
        <div className="produto-desc-title">Descrição Completa</div>
        <div className="produto-desc-grid">
          <div>
            <div className="produto-desc-item-title">Destaques</div>
            <div className="produto-desc-item-text">{produto.destaques}</div>
            <div className="produto-desc-item-title" style={{ marginTop: 32 }}>Sobre o Produto</div>
            <div className="produto-desc-item-text">{produto.sobre}</div>
            <div className="produto-desc-item-title" style={{ marginTop: 32 }}>Condições</div>
            <div className="produto-desc-item-text">{produto.condicoes1}</div>
          </div>
          <div>
            <div className="produto-desc-item-title">Condições</div>
            <div className="produto-desc-item-text">{produto.condicoes2}</div>
          </div>
        </div>
      </div>

      {/* Modal de contato */}
      {!carregandoUsuario && (
        usuarioLogado ? (
          <ModalContato
            open={modalOpen}
            onClose={() => setModalOpen(false)}
            onSubmit={async (dados) => {
              await addDoc(collection(db, "leads"), {
                produtoId: produto.id,
                produtoNome: produto.nome,
                userId: usuarioLogado.id,
                vendedorId: produto.vendedorId,
                nome: dados.nome,
                telefone: dados.telefone,
                email: dados.email,
                cidade: dados.cidade,
                cpf: dados.cpf,
                mensagem: dados.mensagem,
                status: "novo",
                statusPagamento: "pendente",
                valorLance: produto.preco || "",
                metodoPagamento: "mercado_pago",
                criadoEm: serverTimestamp(),
              });
              alert("Mensagem enviada com sucesso!");
              setModalOpen(false);
            }}
            usuario={usuarioLogado}
            produto={produto}
          />
        ) : (
          <AnimatePresence>
            {modalOpen && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                style={{
                  position: "fixed",
                  inset: 0,
                  background: "#1119",
                  zIndex: 1002,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                }}
              >
                <motion.div
                  initial={{ scale: 0.95, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  exit={{ scale: 0.95, opacity: 0 }}
                  transition={{ type: "spring", duration: 0.32 }}
                  style={{
                    background: "#fff",
                    borderRadius: 18,
                    boxShadow: "0 10px 36px #0003",
                    padding: 38,
                    maxWidth: 420,
                    width: "98vw",
                    position: "relative"
                  }}
                >
                  <button
                    onClick={() => setModalOpen(false)}
                    style={{
                      position: "absolute",
                      top: 16,
                      right: 20,
                      fontSize: 22,
                      background: "none",
                      border: "none",
                      color: "#219EBC",
                      cursor: "pointer",
                      fontWeight: 900
                    }}
                    aria-label="Fechar"
                  >
                    ×
                  </button>
                  <h2 style={{ fontSize: "1.25rem", fontWeight: 900, color: "#023047", marginBottom: 18 }}>
                    Faça login para entrar em contato com o anunciante
                  </h2>
                  <Link
                    href="/auth/login"
                    className="btn-modal-laranja"
                    style={{ display: "block", marginTop: 10, textAlign: "center" }}
                  >
                    Fazer Login
                  </Link>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        )
      )}

      {/* CSS premium */}
      <style jsx>{`
        .produto-detalhe { max-width: 1280px; margin: 0 auto; padding: 36px 0 52px 0; background: #f8fbfd;}
        .produto-header { margin-bottom: 22px;}
        .produto-voltar { color: #219EBC; font-size: 1rem; text-decoration: underline; margin-bottom: 22px; display: inline-block;}
        .produto-main-premium { display: flex; gap: 46px; align-items: flex-start; }
        .produto-galeria-box { flex: 1.13; }
        .produto-card-premium {
          flex: 1; min-width: 370px; background: #fff; border-radius: 23px; box-shadow: 0 2px 22px #0001;
          padding: 38px 36px 28px 36px; display: flex; flex-direction: column; gap: 20px; align-items: stretch;
        }
        .produto-preco { font-size: 2.5rem; font-weight: 900; color: #FB8500; letter-spacing: 1px; margin-bottom: 18px; text-align: center;}
        .produto-btn-laranja {
          background: #FB8500; color: #fff; font-weight: 800; font-size: 1.18rem; border: none; border-radius: 11px;
          padding: 14px 0; cursor: pointer; transition: background .14s; width: 100%; margin-bottom: 2px;
        }
        .produto-btn-laranja:hover { background: #e17000;}
        .produto-anunciante-box {
          display: flex; align-items: center; gap: 15px; background: #f5faff; border-radius: 12px; padding: 16px 14px; margin-bottom: 6px;
          box-shadow: 0 2px 8px #219ebc14;
        }
        .produto-anunciante-icn { background: #e5e7eb; border-radius: 50%; width: 46px; height: 46px; display: flex; align-items: center; justify-content: center;}
        .produto-anunciante-nome { font-weight: 800; color: #222; font-size: 1.08rem;}
        .produto-anunciante-cidade { font-size: 0.97rem; color: #666; display: flex; align-items: center;}
        .anunciante-whatsapp {
          background: #2ebd59; color: #fff; font-weight: 700; border-radius: 8px; padding: 7px 16px; margin-left: auto; font-size: 1.04rem; text-decoration: none; display: flex; align-items: center; gap: 7px; transition: background .14s;
        }
        .anunciante-whatsapp:hover { background: #228c41;}
        .produto-info-list { display: grid; grid-template-columns: 1fr 1fr; gap: 13px 20px; font-size: 1.09rem; color: #222;}
        .produto-info-list span { display: flex; align-items: center; gap: 8px;}
        .produto-btns { display: flex; flex-direction: column; gap: 11px; margin-top: 14px;}
        .produto-btn-azul {
          display: flex; align-items: center; gap: 11px; background: #219EBC; color: #fff; font-weight: 700; font-size: 1.13rem;
          border-radius: 10px; padding: 14px 0; justify-content: center; text-decoration: none; border: none; cursor: pointer; box-shadow: 0 2px 12px #219ebc13; transition: background .13s;
        }
        .produto-btn-azul:hover { background: #176684; }
        .produto-desc-box { margin-top: 54px; background: #fff; border-radius: 22px; box-shadow: 0 2px 22px #0001; padding: 44px 54px 44px 54px;}
        .produto-desc-title { font-size: 1.63rem; font-weight: 900; color: #023047; margin-bottom: 32px;}
        .produto-desc-grid { display: grid; grid-template-columns: 1.25fr 1fr; gap: 0 78px;}
        .produto-desc-item-title { font-size: 1.19rem; color: #023047; font-weight: 700; margin-bottom: 8px;}
        .produto-desc-item-text { font-size: 1.15rem; color: #222; line-height: 1.55; }
        @media (max-width: 1100px) {
          .produto-main-premium { flex-direction: column; gap: 26px;}
          .produto-card-premium, .produto-galeria-box { min-width: 0; width: 100%;}
        }
        @media (max-width: 700px) {
          .produto-detalhe { padding: 10px 1vw 22px 1vw;}
          .produto-desc-box { padding: 12px 3px 15px 3px;}
          .produto-desc-title { font-size: 1.14rem;}
          .produto-desc-grid { grid-template-columns: 1fr; gap: 22px 0;}
        }
      `}</style>
    </section>
  );
}
